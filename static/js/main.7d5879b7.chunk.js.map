{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["calculate","symbol","x","y","a","parseFloat","b","alert","App","buttonsBlack","reverse","buttonsWhite","buttonsOrange","refLabelResult","React","createRef","refLabelSaved","elementsOnScreen","getLastElement","length","operatorRepeat","slice","isNaN","Number","current","innerHTML","join","secondDotCheck","includes","prepareExpression","expr","i","replace","runCalculation","expression","result","splice","String","firstPrioritetsCalculate","secondPrioritetsCalculate","runReverse","arrays","lastIndex","buttonClick","element","target","value","undefined","push","newNum","initializeNewSymbol","runMMinus","runMPlus","designedButtonsBlack","map","u","id","onClick","className","designedButtonsWhite","designedButtonsOrange","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d5879b7.chunk.js","sourcesContent":["import './App.css';\nimport React, {useState} from \"react\"\nexport const calculate = (symbol:string, x:string, y:string = \"0\") => {\n\n    let a = parseFloat(x);\n    let b = parseFloat(y);\n    switch (symbol) {\n        case \"+\": {\n            return a + b;\n            break;\n        }\n        case \"-\": {\n            return a - b;\n            break;\n        }\n        case \"*\": {\n            return a * b;\n            break;\n        }\n\n        case \"/\": {\n            return a / b;\n            break;\n        }\n\n        case \"%\": {\n            return a % b;\n            break;\n        }\n        default : {\n            alert(\"No such operator\")\n        }\n\n    }\n\n} // Simple operators switch like \"+\",\"-\",\"/\",\"*\",\"%\"\nfunction App() {\n\n    const buttonsBlack = [\".\", \"0\", \"3\", \"2\", \"1\", \"6\", \"5\", \"4\", \"9\", \"8\", \"7\", \"m-\", \"mr\", \"mc\"].reverse();\n    const buttonsWhite = [\"%\", \"+/-\", \"AC\"].reverse()\n    const buttonsOrange = [\"=\", \"+\", \"-\", \"*\", \"m+\", \"/\"].reverse()\n    const refLabelResult = React.createRef<HTMLDivElement>(); //ref for result/expression\n    const refLabelSaved = React.createRef<HTMLDivElement>(); //ref for \"m-\" and \"m+\"\n    let elementsOnScreen:Array<string> = []; // Our expression\n    let getLastElement = () => {\n        return elementsOnScreen[elementsOnScreen.length - 1]\n    }  // get last element from expression\n    let initializeNewSymbol = (target:any) => {\n        if (isNaN(target.value) && getLastElement() == undefined) return;  // First element -- operator CHECK\n        if ((isNaN(target.value) && getLastElement() && ((getLastElement().slice(-1) != \")\")))) {\n            if ((operatorRepeat(target.value) == 1)) return;\n        } // If symbol==operator -- Double operators CHECK\n        if (target.value == \".\") {\n            if (secondDotCheck()) return;\n\n        }  // If symbol == \".\" -- two dots CHECK (cant be 0..421)\n\n        if ((!isNaN(parseFloat(target.value)) || (target.value == '.')) // CHECK if we have \"2\" and \"3\",then change \"2\" on \"23\"\n            && (!isNaN(parseFloat(getLastElement())))) {\n\n            let newNum = getLastElement() + target.value;\n            elementsOnScreen.splice(elementsOnScreen.length - 1, 1, newNum)\n\n        } else elementsOnScreen.push(target.innerHTML)  // else if we have  \"+\" and \"3\",just create new element \"3\"\n        refLabelResult.current.innerHTML = (elementsOnScreen.join('')); // update label with new Symbols\n    } //Checking different conditions and creating array \"elementsOnScreen\"\n\n    const operatorRepeat = (symbol:string) => {\n\n        if ( (getLastElement().slice(-1) == \".\")) {\n\n            alert(\"You should enter the number\")\n\n            return 1\n        } else if (isNaN(Number(getLastElement())) && isNaN(Number(symbol))){\n            elementsOnScreen[elementsOnScreen.length-1]=symbol;\n            refLabelResult.current.innerHTML = (elementsOnScreen.join(''));\n            return 1;\n        }\n\n    } // checking repeating operators like cant be \"3*/\"\n    const secondDotCheck = () => {\n        if (!getLastElement() && getLastElement() != \"0\") {\n            alert(\"NaN\")\n            return 1;\n        }\n        if (getLastElement() && getLastElement().includes(\".\")) {\n            alert(\"Too many dots or dot is NaN\")\n            return 1\n        }\n\n    } // checking repeating operators \".\" like cant be \"3..\"\n    const prepareExpression = (expr:Array<string>) => {\n        for (let i = 0; i < expr.length; i++) {\n            if (expr[i].includes(\"(\") || expr[i].includes(\")\")) {\n\n                expr[i] = expr[i].replace('(', '');\n                expr[i] = expr[i].replace(')', '');\n\n            }\n        }\n    } // deleting \"(\" and \")\"\n    const firstPrioritetsCalculate = (expr:Array<string>) => {\n        for (let i = 0; i <= expr.length - 2; i++) {\n            if (expr[i] == \"*\" || expr[i] == \"/\" || expr[i] == \"%\") {\n\n                let result = calculate(expr[i], expr[i - 1], expr[i + 1])\n                expr.splice(i - 1, 3, String(result));\n                i--;\n            }\n        }\n    } // Calculating \"*\",\"/\",\"%\"\n    const secondPrioritetsCalculate = (expr:Array<string>) => {\n        for (let i = 0; i <= expr.length; i++) {\n            if (expr[i] == \"+\" || expr[i] == \"-\") {\n\n                let result = calculate(expr[i], expr[i - 1], expr[i + 1])\n                expr.splice(i - 1, 3, String(result));\n                i--;\n            }\n        }\n    }//Calculating \"+\",\"-\"\n\n    const runCalculation = (expression:Array<string>) => {\n        prepareExpression(expression);\n        firstPrioritetsCalculate(expression)\n        secondPrioritetsCalculate(expression)\n        return Number(expression)\n    }  // Calculate full expression (=)\n    const runAC = () => {\n        refLabelResult.current.innerHTML = \"0\";\n        elementsOnScreen.length = 0;\n    }\n    const runMR = () => {\n        refLabelResult.current.innerHTML = refLabelSaved.current.innerHTML;\n        elementsOnScreen.length = 1;\n        elementsOnScreen[0] = (refLabelSaved.current.innerHTML)}\n\n    const runMC = () => {\n        refLabelSaved.current.innerHTML = String(0);\n\n    }\n    const runPlusMinus = () => {\n        elementsOnScreen = runReverse(elementsOnScreen);\n        refLabelResult.current.innerHTML = (elementsOnScreen.join(''));\n\n    }\n    const runMPlus = (arrays:Array<string>) => {\n        if (arrays.length == 0) {\n            refLabelSaved.current.innerHTML = String(Number(refLabelSaved.current.innerHTML) + Number(refLabelResult.current.innerHTML));\n            return;\n        }\n        if (isNaN(Number(getLastElement()))) {\n            alert(\"Finish your expression!\")\n            return;\n        }\n        let result = runCalculation(arrays);\n        refLabelSaved.current.innerHTML = String(Number(refLabelSaved.current.innerHTML) + result);\n        arrays.length = 0;\n        return arrays;\n    }\n    const runMMinus = (arrays:Array<string>) => {\n        if (isNaN(Number(getLastElement()))) {\n            alert(\"Finish your expression!\")\n            return;\n        }\n        if (arrays.length == 0) {\n            refLabelSaved.current.innerHTML = String(Number(refLabelSaved.current.innerHTML) - Number(refLabelResult.current.innerHTML));\n            return;\n        }\n        let result = runCalculation(arrays);\n        refLabelSaved.current.innerHTML = String(Number(refLabelSaved.current.innerHTML) - result);\n        arrays.length = 0;\n        return arrays;\n    }\n    const runReverse = (arrays:Array<string>) => {\n        prepareExpression(arrays)\n        let lastIndex;\n        if (isNaN(Number(arrays[arrays.length - 1])) && isNaN(Number(arrays[arrays.length - 2]))) {\n            alert(\"Your cant do it\")\n            return arrays\n        }\n            else if(isNaN(Number(arrays[arrays.length - 2]))) lastIndex=arrays.length-1\n            else lastIndex = arrays.length - 2;\n\n        arrays[lastIndex] = \"(\" + String(-arrays[lastIndex]) + \")\";\n        return arrays\n    }\n\n\n    let buttonClick = (element:any) => {\n\n        if (element.target.value == \"=\") {\n            refLabelResult.current.innerHTML = String(runCalculation(elementsOnScreen));\n            elementsOnScreen.length = 1;\n            elementsOnScreen[0]=refLabelResult.current.innerHTML;\n            return;\n        }\n        if (element.target.value == \"m+\") {\n            runMPlus(elementsOnScreen);\n            return;\n        }\n        if (element.target.value == \"m-\") {\n            runMMinus(elementsOnScreen);\n            return;\n        }\n        if (element.target.value == \"AC\") {\n            runAC()\n            return;\n        }\n        if (element.target.value == \"mc\") {\n            runMC();\n            return;\n        }\n        if (element.target.value == \"mr\") {\n           runMR();\n            return;\n        }\n        if (element.target.value == \"+/-\") {\n            runPlusMinus();\n            return;\n        }\n\n        initializeNewSymbol(element.target);\n\n\n    }\n\n\n//Creating <button><button> with onclick=buttonClick from Array of buttons\n    const designedButtonsBlack = buttonsBlack.map((u) => {\n        if (u == \"0\") return <button id={\"zero\"} value={u} onClick={buttonClick}>{u}</button>\n        else return <button className={\"blackButtons\"} value={u} onClick={buttonClick}>{u}</button>\n    }) //0 has special id because it has Double Width\n    const designedButtonsWhite = buttonsWhite.map((u) => {\n        return (<button value={u} className={\"whiteButtons\"} onClick={buttonClick}>{u}</button>)\n    })\n    const designedButtonsOrange = buttonsOrange.map((u) => {\n        return (<button value={u} className={\"yellowButtons\"} onClick={buttonClick}>{u}</button>)\n    });\n\n\n    return (\n        <div className=\"App\">\n            <div className={\"calculator\"}>\n\n\n                <div className={\"labelBig\"}  ref={refLabelResult}>0</div>\n                //Label for result\n                <div className={\"labelSmall\"}  ref={refLabelSaved}>0</div>//Label for \"m+\" and \"m-\"\n                <div className={\"columns\"}>\n\n                    <div className={\"firstColumn\"}>\n                        <div className={\"firstColumnSmallFirst\"}>\n                            {designedButtonsWhite}\n                        </div>\n                        <div className={\"firstColumnSmallSecond\"}>\n                            {designedButtonsBlack}\n                        </div>\n                    </div>\n                    <div className={\"secondColumn\"}>\n                        {designedButtonsOrange}\n                    </div>\n                </div>\n            </div>\n<div >Created for Test Task by  <span className={\"marian\"}> &copy;<i>marianelement@gmail.com</i></span></div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}