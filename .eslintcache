[{"D:\\calculator\\src\\index.js":"1","D:\\calculator\\src\\reportWebVitals.js":"2","D:\\calculator\\src\\App.tsx":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":9487,"mtime":1606914950826,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1xsl336",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"D:\\calculator\\src\\index.js",[],["16","17"],"D:\\calculator\\src\\reportWebVitals.js",[],"D:\\calculator\\src\\App.tsx",["18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47"],"import './App.css';\nimport React, {useState} from \"react\"\nexport const calculate = (symbol:string, x:string, y:string = \"0\") => {\n\n    let a = parseFloat(x);\n    let b = parseFloat(y);\n    switch (symbol) {\n        case \"+\": {\n            return a + b;\n            break;\n        }\n        case \"-\": {\n            return a - b;\n            break;\n        }\n        case \"*\": {\n            return a * b;\n            break;\n        }\n\n        case \"/\": {\n            return a / b;\n            break;\n        }\n\n        case \"%\": {\n            return a % b;\n            break;\n        }\n        default : {\n            alert(\"No such operator\")\n        }\n\n    }\n\n} // Simple operators switch like \"+\",\"-\",\"/\",\"*\",\"%\"\nfunction App() {\n\n    const buttonsBlack = [\".\", \"0\", \"3\", \"2\", \"1\", \"6\", \"5\", \"4\", \"9\", \"8\", \"7\", \"m-\", \"mr\", \"mc\"].reverse();\n    const buttonsWhite = [\"%\", \"+/-\", \"AC\"].reverse()\n    const buttonsOrange = [\"=\", \"+\", \"-\", \"*\", \"m+\", \"/\"].reverse()\n    const refLabelResult = React.createRef<HTMLDivElement>(); //ref for result/expression\n    const refLabelSaved = React.createRef<HTMLDivElement>(); //ref for \"m-\" and \"m+\"\n    let elementsOnScreen:Array<string> = []; // Our expression\n    let getLastElement = () => {\n        return elementsOnScreen[elementsOnScreen.length - 1]\n    }  // get last element from expression\n    let initializeNewSymbol = (target:any) => {\n        if (isNaN(target.value) && getLastElement() == undefined) return;  // First element -- operator CHECK\n        if ((isNaN(target.value) && getLastElement() && ((getLastElement().slice(-1) != \")\")))) {\n            if ((operatorRepeat(target.value) == 1)) return;\n        } // If symbol==operator -- Double operators CHECK\n        if (target.value == \".\") {\n            if (secondDotCheck()) return;\n\n        }  // If symbol == \".\" -- two dots CHECK (cant be 0..421)\n\n        if ((!isNaN(parseFloat(target.value)) || (target.value == '.')) // CHECK if we have \"2\" and \"3\",then change \"2\" on \"23\"\n            && (!isNaN(parseFloat(getLastElement())))) {\n\n            let newNum = getLastElement() + target.value;\n            elementsOnScreen.splice(elementsOnScreen.length - 1, 1, newNum)\n\n        } else elementsOnScreen.push(target.innerHTML)  // else if we have  \"+\" and \"3\",just create new element \"3\"\n        refLabelResult.current.innerHTML = (elementsOnScreen.join('')); // update label with new Symbols\n    } //Checking different conditions and creating array \"elementsOnScreen\"\n\n    const operatorRepeat = (symbol:string) => {\n\n        if ((isNaN(Number(getLastElement())) && isNaN(Number(symbol))) || (getLastElement().slice(-1) == \".\")) {\n\n            alert(\"You should enter the number\")\n\n            return 1\n        }\n\n    } // checking repeating operators like cant be \"3*/\"\n    const secondDotCheck = () => {\n        if (!getLastElement() && getLastElement() != \"0\") {\n            alert(\"NaN\")\n            return 1;\n        }\n        if (getLastElement() && getLastElement().includes(\".\")) {\n            alert(\"Too many dots or dot is NaN\")\n            return 1\n        }\n\n    } // checking repeating operators \".\" like cant be \"3..\"\n    const prepareExpression = (expr:Array<string>) => {\n        for (let i = 0; i < expr.length; i++) {\n            if (expr[i].includes(\"(\") || expr[i].includes(\")\")) {\n\n                expr[i] = expr[i].replace('(', '');\n                expr[i] = expr[i].replace(')', '');\n\n            }\n        }\n    } // deleting \"(\" and \")\"\n    const firstPrioritetsCalculate = (expr:Array<string>) => {\n        for (let i = 0; i <= expr.length - 2; i++) {\n            if (expr[i] == \"*\" || expr[i] == \"/\" || expr[i] == \"%\") {\n\n                let result = calculate(expr[i], expr[i - 1], expr[i + 1])\n                expr.splice(i - 1, 3, String(result));\n                i--;\n            }\n        }\n    } // Calculating \"*\",\"/\",\"%\"\n    const secondPrioritetsCalculate = (expr:Array<string>) => {\n        for (let i = 0; i <= expr.length; i++) {\n            if (expr[i] == \"+\" || expr[i] == \"-\") {\n\n                let result = calculate(expr[i], expr[i - 1], expr[i + 1])\n                expr.splice(i - 1, 3, String(result));\n                i--;\n            }\n        }\n    }//Calculating \"+\",\"-\"\n\n    const runCalculation = (expression:Array<string>) => {\n        prepareExpression(expression);\n        firstPrioritetsCalculate(expression)\n        secondPrioritetsCalculate(expression)\n        return Number(expression)\n    }  // Calculate full expression (=)\n    const runAC = () => {\n        refLabelResult.current.innerHTML = \"0\";\n        elementsOnScreen.length = 0;\n    }\n    const runMR = () => {\n        refLabelResult.current.innerHTML = refLabelSaved.current.innerHTML;\n        elementsOnScreen.length = 1;\n        elementsOnScreen[0] = (refLabelSaved.current.innerHTML)}\n\n    const runMC = () => {\n        refLabelSaved.current.innerHTML = String(0);\n\n    }\n    const runPlusMinus = () => {\n        elementsOnScreen = runReverse(elementsOnScreen);\n        refLabelResult.current.innerHTML = (elementsOnScreen.join(''));\n\n    }\n    const runMPlus = (arrays:Array<string>) => {\n        if (arrays.length == 0) {\n            refLabelSaved.current.innerHTML = String(Number(refLabelSaved.current.innerHTML) + Number(refLabelResult.current.innerHTML));\n            return;\n        }\n        if (isNaN(Number(getLastElement()))) {\n            alert(\"Finish your expression!\")\n            return;\n        }\n        let result = runCalculation(arrays);\n        refLabelSaved.current.innerHTML = String(Number(refLabelSaved.current.innerHTML) + result);\n        arrays.length = 0;\n        return arrays;\n    }\n    const runMMinus = (arrays:Array<string>) => {\n        if (isNaN(Number(getLastElement()))) {\n            alert(\"Finish your expression!\")\n            return;\n        }\n        if (arrays.length == 0) {\n            refLabelSaved.current.innerHTML = String(Number(refLabelSaved.current.innerHTML) - Number(refLabelResult.current.innerHTML));\n            return;\n        }\n        let result = runCalculation(arrays);\n        refLabelSaved.current.innerHTML = String(Number(refLabelSaved.current.innerHTML) - result);\n        arrays.length = 0;\n        return arrays;\n    }\n    const runReverse = (arrays:Array<string>) => {\n        prepareExpression(arrays)\n        let lastIndex;\n        if (isNaN(Number(arrays[arrays.length - 1])) && isNaN(Number(arrays[arrays.length - 2]))) {\n            alert(\"Your cant do it\")\n            return arrays\n        }\n            else if(isNaN(Number(arrays[arrays.length - 2]))) lastIndex=arrays.length-1\n            else lastIndex = arrays.length - 2;\n\n        arrays[lastIndex] = \"(\" + String(-arrays[lastIndex]) + \")\";\n        return arrays\n    }\n\n\n    let buttonClick = (element:any) => {\n        if ( !refLabelResult.current.innerHTML) throw new Error(\"Not found\")\n        if (element.target.value == \"=\") {\n            refLabelResult.current.innerHTML = String(runCalculation(elementsOnScreen));\n            elementsOnScreen.length = 0;\n            return;\n        }\n        if (element.target.value == \"m+\") {\n            runMPlus(elementsOnScreen);\n            return;\n        }\n        if (element.target.value == \"m-\") {\n            runMMinus(elementsOnScreen);\n            return;\n        }\n        if (element.target.value == \"AC\") {\n            runAC()\n            return;\n        }\n        if (element.target.value == \"mc\") {\n            runMC();\n            return;\n        }\n        if (element.target.value == \"mr\") {\n           runMR();\n            return;\n        }\n        if (element.target.value == \"+/-\") {\n            runPlusMinus();\n            return;\n        }\n\n        initializeNewSymbol(element.target);\n\n\n    }\n\n\n//Creating <button><button> with onclick=buttonClick from Array of buttons\n    const designedButtonsBlack = buttonsBlack.map((u) => {\n        if (u == \"0\") return <button id={\"zero\"} value={u} onClick={buttonClick}>{u}</button>\n        else return <button className={\"blackButtons\"} value={u} onClick={buttonClick}>{u}</button>\n    }) //0 has special id because it has Double Width\n    const designedButtonsWhite = buttonsWhite.map((u) => {\n        return (<button value={u} className={\"whiteButtons\"} onClick={buttonClick}>{u}</button>)\n    })\n    const designedButtonsOrange = buttonsOrange.map((u) => {\n        return (<button value={u} className={\"yellowButtons\"} onClick={buttonClick}>{u}</button>)\n    });\n\n\n    return (\n        <div className=\"App\">\n            <div className={\"calculator\"}>\n\n\n                <div className={\"labelBig\"}  ref={refLabelResult}>0</div>\n                //Label for result\n                <div className={\"labelSmall\"}  ref={refLabelSaved}>0</div>//Label for \"m+\" and \"m-\"\n                <div className={\"columns\"}>\n\n                    <div className={\"firstColumn\"}>\n                        <div className={\"firstColumnSmallFirst\"}>\n                            {designedButtonsWhite}\n                        </div>\n                        <div className={\"firstColumnSmallSecond\"}>\n                            {designedButtonsBlack}\n                        </div>\n                    </div>\n                    <div className={\"secondColumn\"}>\n                        {designedButtonsOrange}\n                    </div>\n                </div>\n            </div>\n<div >Created for Test Task by  <span className={\"marian\"}> &copy;<i>marianelement@gmail.com</i></span></div>\n        </div>\n    );\n}\n\nexport default App;\n",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":2,"column":16,"nodeType":"54","messageId":"55","endLine":2,"endColumn":24},{"ruleId":"56","severity":1,"message":"57","line":10,"column":13,"nodeType":"58","messageId":"59","endLine":10,"endColumn":19},{"ruleId":"56","severity":1,"message":"57","line":14,"column":13,"nodeType":"58","messageId":"59","endLine":14,"endColumn":19},{"ruleId":"56","severity":1,"message":"57","line":18,"column":13,"nodeType":"58","messageId":"59","endLine":18,"endColumn":19},{"ruleId":"56","severity":1,"message":"57","line":23,"column":13,"nodeType":"58","messageId":"59","endLine":23,"endColumn":19},{"ruleId":"56","severity":1,"message":"57","line":28,"column":13,"nodeType":"58","messageId":"59","endLine":28,"endColumn":19},{"ruleId":"60","severity":1,"message":"61","line":49,"column":53,"nodeType":"62","messageId":"63","endLine":49,"endColumn":55},{"ruleId":"60","severity":1,"message":"64","line":50,"column":86,"nodeType":"62","messageId":"63","endLine":50,"endColumn":88},{"ruleId":"60","severity":1,"message":"61","line":51,"column":47,"nodeType":"62","messageId":"63","endLine":51,"endColumn":49},{"ruleId":"60","severity":1,"message":"61","line":53,"column":26,"nodeType":"62","messageId":"63","endLine":53,"endColumn":28},{"ruleId":"60","severity":1,"message":"61","line":58,"column":64,"nodeType":"62","messageId":"63","endLine":58,"endColumn":66},{"ruleId":"60","severity":1,"message":"61","line":70,"column":103,"nodeType":"62","messageId":"63","endLine":70,"endColumn":105},{"ruleId":"60","severity":1,"message":"64","line":79,"column":51,"nodeType":"62","messageId":"63","endLine":79,"endColumn":53},{"ruleId":"60","severity":1,"message":"61","line":101,"column":25,"nodeType":"62","messageId":"63","endLine":101,"endColumn":27},{"ruleId":"60","severity":1,"message":"61","line":101,"column":43,"nodeType":"62","messageId":"63","endLine":101,"endColumn":45},{"ruleId":"60","severity":1,"message":"61","line":101,"column":61,"nodeType":"62","messageId":"63","endLine":101,"endColumn":63},{"ruleId":"60","severity":1,"message":"61","line":111,"column":25,"nodeType":"62","messageId":"63","endLine":111,"endColumn":27},{"ruleId":"60","severity":1,"message":"61","line":111,"column":43,"nodeType":"62","messageId":"63","endLine":111,"endColumn":45},{"ruleId":"60","severity":1,"message":"61","line":145,"column":27,"nodeType":"62","messageId":"63","endLine":145,"endColumn":29},{"ruleId":"60","severity":1,"message":"61","line":163,"column":27,"nodeType":"62","messageId":"63","endLine":163,"endColumn":29},{"ruleId":"60","severity":1,"message":"61","line":189,"column":34,"nodeType":"62","messageId":"63","endLine":189,"endColumn":36},{"ruleId":"60","severity":1,"message":"61","line":194,"column":34,"nodeType":"62","messageId":"63","endLine":194,"endColumn":36},{"ruleId":"60","severity":1,"message":"61","line":198,"column":34,"nodeType":"62","messageId":"63","endLine":198,"endColumn":36},{"ruleId":"60","severity":1,"message":"61","line":202,"column":34,"nodeType":"62","messageId":"63","endLine":202,"endColumn":36},{"ruleId":"60","severity":1,"message":"61","line":206,"column":34,"nodeType":"62","messageId":"63","endLine":206,"endColumn":36},{"ruleId":"60","severity":1,"message":"61","line":210,"column":34,"nodeType":"62","messageId":"63","endLine":210,"endColumn":36},{"ruleId":"60","severity":1,"message":"61","line":214,"column":34,"nodeType":"62","messageId":"63","endLine":214,"endColumn":36},{"ruleId":"60","severity":1,"message":"61","line":227,"column":15,"nodeType":"62","messageId":"63","endLine":227,"endColumn":17},{"ruleId":"65","severity":1,"message":"66","line":243,"column":74,"nodeType":"67","endLine":245,"endColumn":17},{"ruleId":"65","severity":1,"message":"66","line":245,"column":75,"nodeType":"67","endLine":246,"endColumn":17},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","no-global-assign","no-unsafe-negation"]